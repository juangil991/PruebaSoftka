// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace RetoFront.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\Automatizacion\source\repos\RetoFront\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Automatizacion\source\repos\RetoFront\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Automatizacion\source\repos\RetoFront\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Automatizacion\source\repos\RetoFront\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Automatizacion\source\repos\RetoFront\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Automatizacion\source\repos\RetoFront\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Automatizacion\source\repos\RetoFront\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Automatizacion\source\repos\RetoFront\_Imports.razor"
using RetoFront;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\Automatizacion\source\repos\RetoFront\_Imports.razor"
using RetoFront.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Automatizacion\source\repos\RetoFront\Pages\Preguntas.razor"
using RetoFront.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Automatizacion\source\repos\RetoFront\Pages\Preguntas.razor"
using RetoFront.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Automatizacion\source\repos\RetoFront\Pages\Preguntas.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Automatizacion\source\repos\RetoFront\Pages\Preguntas.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/preguntas")]
    public partial class Preguntas : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 101 "C:\Users\Automatizacion\source\repos\RetoFront\Pages\Preguntas.razor"
       


    public PreguntasRequest<PreguntasDb> Obtener = new PreguntasRequest<PreguntasDb>(); // obtinen pregunta aleatoria segun la dificultad
    public RespuestasRequest<List<RespuestasDb>> Obtener2 { get; set; } = new RespuestasRequest<List<RespuestasDb>>(); // obtiene el listado de respuestas asociados a la pregunta
    public PreguntasRequest<object> response = new PreguntasRequest<object>();
    public UsersRequest<object> UserResponse = new UsersRequest<object>();
    public UsersRequest<object> UserResponse2 = new UsersRequest<object>();
    public PreguntasDb send = new PreguntasDb(); // variable para actualizar el estado de las preguntas y no repetir ninguna
    public User Usersend = new User(); //usuario a enviar a la base de datos
    string url = "https://localhost:44376/api/Pregutas"; //url a la API de preguntas
    string url2 = "https://localhost:44376/api/Respuestas";  // url a la API de respuestas
    string url3 = "https://localhost:44376/api/Users"; //url a la API de usuarios
    int dificultad = 0; // dificultad/ronda de la pregunta
    int dificultad2; // respuestas asosicadas a la pregunta
    int SelectRespuesta; // (1: respuesta correcta 0:Respuesta incorrecta)
    int Actualizar; // se usa para actualizar el contenido del checkbox
    int puntaje; // variable que guarda el puntaje del juego
    int ModalWindows; //variable que se utiliza para llamar ventana emergente

    public RespuestasRequest<List<RespuestasDb>> pruebita { get; set; }

    //Funcion que se utiliza para obtener las preguntas y respuestas de la base de datos
    protected override async Task OnInitializedAsync()
    {
        dificultad = dificultad + 1; //aumenta dificultad/ronda
        Obtener = await http.GetFromJsonAsync<PreguntasRequest<PreguntasDb>>(url + "/" + dificultad);
        dificultad2 = Obtener.Data.Id;
        Obtener2 = await http.GetFromJsonAsync<RespuestasRequest<List<RespuestasDb>>>(url2 + "/" + dificultad2);
        SelectRespuesta = 0;
        Actualizar = 0;
        Obtener.Data.Estado = 1;
        send = Obtener.Data;
        var respond = await http.PutAsJsonAsync<PreguntasDb>(url, send);
        response = respond.Content.ReadFromJsonAsync<PreguntasRequest<object>>().Result;
        puntaje = puntaje + ((dificultad - 1) * 100);
    }


    // funcion que obtiene el valor de la respuesta (1: correcta 0: incorrecta) y el id de la pregunta seleccionada
    public void getid(int res, int id)
    {
        SelectRespuesta = res;
        Actualizar = id;
    }

    // funcion que se ejecuta al fallar o terminar el juego enviando el puntaje a la base de datos
    private async void Terminar()
    {
        if (SelectRespuesta == 1)
        {
            ModalWindows = 1;

        }
        else
        {
            puntaje = 0;
            ModalWindows = 2;

        }
        Usersend.Puntaje = puntaje;
        send.Estado = 99;
        var respond2 = await http.PutAsJsonAsync<User>(url3, Usersend);
        UserResponse2 = respond2.Content.ReadFromJsonAsync<UsersRequest<object>>().Result;



    }
    //funcion que se ejecuta al terminar el juego en cualquier momento y envia el puntaje actual  a la base de datos
    private async void GetPunt()
    {
        ModalWindows = 1;
        Usersend.Puntaje = puntaje;
        var respond = await http.PutAsJsonAsync<User>(url3, Usersend);
        UserResponse = respond.Content.ReadFromJsonAsync<UsersRequest<object>>().Result;

    }




#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager Navi { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient http { get; set; }
    }
}
#pragma warning restore 1591
